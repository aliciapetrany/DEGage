// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/DEGage.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// permtest
double permtest(NumericVector genecount, NumericVector group, CharacterVector levels, int nperms);
static SEXP _DEGage_permtest_try(SEXP genecountSEXP, SEXP groupSEXP, SEXP levelsSEXP, SEXP npermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type genecount(genecountSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< int >::type nperms(npermsSEXP);
    rcpp_result_gen = Rcpp::wrap(permtest(genecount, group, levels, nperms));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DEGage_permtest(SEXP genecountSEXP, SEXP groupSEXP, SEXP levelsSEXP, SEXP npermsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DEGage_permtest_try(genecountSEXP, groupSEXP, levelsSEXP, npermsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// DEGage_mean
double DEGage_mean(double r1, double p1, double r2, double p2);
static SEXP _DEGage_DEGage_mean_try(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(DEGage_mean(r1, p1, r2, p2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DEGage_DEGage_mean(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DEGage_DEGage_mean_try(r1SEXP, p1SEXP, r2SEXP, p2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// DEGage_pdf
float DEGage_pdf(double r1, double p1, double r2, double p2, double dn);
static SEXP _DEGage_DEGage_pdf_try(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP, SEXP dnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type dn(dnSEXP);
    rcpp_result_gen = Rcpp::wrap(DEGage_pdf(r1, p1, r2, p2, dn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DEGage_DEGage_pdf(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP, SEXP dnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DEGage_DEGage_pdf_try(r1SEXP, p1SEXP, r2SEXP, p2SEXP, dnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// DEGage_cdf
float DEGage_cdf(double r1, double p1, double r2, double p2, double k, int maxiter);
static SEXP _DEGage_DEGage_cdf_try(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP, SEXP kSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(DEGage_cdf(r1, p1, r2, p2, k, maxiter));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DEGage_DEGage_cdf(SEXP r1SEXP, SEXP p1SEXP, SEXP r2SEXP, SEXP p2SEXP, SEXP kSEXP, SEXP maxiterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DEGage_DEGage_cdf_try(r1SEXP, p1SEXP, r2SEXP, p2SEXP, kSEXP, maxiterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cdf_facilitator
NumericVector cdf_facilitator(DataFrame& df, int maxiter);
static SEXP _DEGage_cdf_facilitator_try(SEXP dfSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_facilitator(df, maxiter));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _DEGage_cdf_facilitator(SEXP dfSEXP, SEXP maxiterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_DEGage_cdf_facilitator_try(dfSEXP, maxiterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _DEGage_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*permtest)(NumericVector,NumericVector,CharacterVector,int)");
        signatures.insert("double(*DEGage_mean)(double,double,double,double)");
        signatures.insert("float(*DEGage_pdf)(double,double,double,double,double)");
        signatures.insert("float(*DEGage_cdf)(double,double,double,double,double,int)");
        signatures.insert("NumericVector(*cdf_facilitator)(DataFrame&,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _DEGage_RcppExport_registerCCallable() { 
    R_RegisterCCallable("DEGage", "_DEGage_permtest", (DL_FUNC)_DEGage_permtest_try);
    R_RegisterCCallable("DEGage", "_DEGage_DEGage_mean", (DL_FUNC)_DEGage_DEGage_mean_try);
    R_RegisterCCallable("DEGage", "_DEGage_DEGage_pdf", (DL_FUNC)_DEGage_DEGage_pdf_try);
    R_RegisterCCallable("DEGage", "_DEGage_DEGage_cdf", (DL_FUNC)_DEGage_DEGage_cdf_try);
    R_RegisterCCallable("DEGage", "_DEGage_cdf_facilitator", (DL_FUNC)_DEGage_cdf_facilitator_try);
    R_RegisterCCallable("DEGage", "_DEGage_RcppExport_validate", (DL_FUNC)_DEGage_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_DEGage_permtest", (DL_FUNC) &_DEGage_permtest, 4},
    {"_DEGage_DEGage_mean", (DL_FUNC) &_DEGage_DEGage_mean, 4},
    {"_DEGage_DEGage_pdf", (DL_FUNC) &_DEGage_DEGage_pdf, 5},
    {"_DEGage_DEGage_cdf", (DL_FUNC) &_DEGage_DEGage_cdf, 6},
    {"_DEGage_cdf_facilitator", (DL_FUNC) &_DEGage_cdf_facilitator, 2},
    {"_DEGage_RcppExport_registerCCallable", (DL_FUNC) &_DEGage_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_DEGage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
