// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_DEGage_RCPPEXPORTS_H_GEN_
#define RCPP_DEGage_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace DEGage {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("DEGage", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("DEGage", "_DEGage_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in DEGage");
            }
        }
    }

    inline double permtest(NumericVector genecount, NumericVector group, CharacterVector levels, int nperms) {
        typedef SEXP(*Ptr_permtest)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_permtest p_permtest = NULL;
        if (p_permtest == NULL) {
            validateSignature("double(*permtest)(NumericVector,NumericVector,CharacterVector,int)");
            p_permtest = (Ptr_permtest)R_GetCCallable("DEGage", "_DEGage_permtest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_permtest(Shield<SEXP>(Rcpp::wrap(genecount)), Shield<SEXP>(Rcpp::wrap(group)), Shield<SEXP>(Rcpp::wrap(levels)), Shield<SEXP>(Rcpp::wrap(nperms)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double DEGage_mean(double r1, double p1, double r2, double p2) {
        typedef SEXP(*Ptr_DEGage_mean)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_DEGage_mean p_DEGage_mean = NULL;
        if (p_DEGage_mean == NULL) {
            validateSignature("double(*DEGage_mean)(double,double,double,double)");
            p_DEGage_mean = (Ptr_DEGage_mean)R_GetCCallable("DEGage", "_DEGage_DEGage_mean");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_DEGage_mean(Shield<SEXP>(Rcpp::wrap(r1)), Shield<SEXP>(Rcpp::wrap(p1)), Shield<SEXP>(Rcpp::wrap(r2)), Shield<SEXP>(Rcpp::wrap(p2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline float DEGage_pdf(double r1, double p1, double r2, double p2, double dn) {
        typedef SEXP(*Ptr_DEGage_pdf)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_DEGage_pdf p_DEGage_pdf = NULL;
        if (p_DEGage_pdf == NULL) {
            validateSignature("float(*DEGage_pdf)(double,double,double,double,double)");
            p_DEGage_pdf = (Ptr_DEGage_pdf)R_GetCCallable("DEGage", "_DEGage_DEGage_pdf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_DEGage_pdf(Shield<SEXP>(Rcpp::wrap(r1)), Shield<SEXP>(Rcpp::wrap(p1)), Shield<SEXP>(Rcpp::wrap(r2)), Shield<SEXP>(Rcpp::wrap(p2)), Shield<SEXP>(Rcpp::wrap(dn)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<float >(rcpp_result_gen);
    }

    inline float DEGage_cdf(double r1, double p1, double r2, double p2, double k, int maxiter) {
        typedef SEXP(*Ptr_DEGage_cdf)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_DEGage_cdf p_DEGage_cdf = NULL;
        if (p_DEGage_cdf == NULL) {
            validateSignature("float(*DEGage_cdf)(double,double,double,double,double,int)");
            p_DEGage_cdf = (Ptr_DEGage_cdf)R_GetCCallable("DEGage", "_DEGage_DEGage_cdf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_DEGage_cdf(Shield<SEXP>(Rcpp::wrap(r1)), Shield<SEXP>(Rcpp::wrap(p1)), Shield<SEXP>(Rcpp::wrap(r2)), Shield<SEXP>(Rcpp::wrap(p2)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(maxiter)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<float >(rcpp_result_gen);
    }

    inline NumericVector cdf_facilitator(DataFrame& df, int maxiter) {
        typedef SEXP(*Ptr_cdf_facilitator)(SEXP,SEXP);
        static Ptr_cdf_facilitator p_cdf_facilitator = NULL;
        if (p_cdf_facilitator == NULL) {
            validateSignature("NumericVector(*cdf_facilitator)(DataFrame&,int)");
            p_cdf_facilitator = (Ptr_cdf_facilitator)R_GetCCallable("DEGage", "_DEGage_cdf_facilitator");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cdf_facilitator(Shield<SEXP>(Rcpp::wrap(df)), Shield<SEXP>(Rcpp::wrap(maxiter)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_DEGage_RCPPEXPORTS_H_GEN_
